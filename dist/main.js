(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_get=function e(t,r,n){var a=Object.getOwnPropertyDescriptor(t,r);if(void 0===a){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in a)return a.value;var o=a.get;return void 0===o?void 0:o.call(n)},_inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)};Object.defineProperty(exports,"__esModule",{value:!0});var _GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),_Component$Registry=require("./component.js"),_RenderableTexturedRect=require("./renderable.js"),_mMath=require("./utils.js"),uid=0,AnimationSystem=function(e){function t(){var e=void 0===arguments[0]?"animation"+uid++:arguments[0];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,["animatable"])}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e,t){var r=_Component$Registry.Registry.getFlag("animatable");e.each(function(e){var n=e.get(r),a=n.current,i=n.__last,o=n.animations[n.current];if(a!==i&&(n.animations[i].current_frame=0,n.animations[i].current_time=0),o.current_time+t>=o.frametime){var s=o.frames.length;(o.current_frame<s-1||o.repeatable)&&(o.current_frame=(o.current_frame+1)%s,o.frames[o.current_frame].transform!==o.transform&&(o.frames[o.current_frame].transform=o.transform),e.add(o.frames[o.current_frame]))}n.__last=a,o.current_time=(o.current_time+t)%o.frametime},this.lock)}}]),t}(_GameSystem3["default"]),Animation=function(){function e(t,r){var n=void 0===arguments[2]?!0:arguments[2],a=void 0===arguments[3]?_mMath.mMath.i():arguments[3];_classCallCheck(this,e),this._frames=t,this._frametime=1e3/(r||1),this._repeatable=n,this.current_frame=0,this.current_time=0,this.transform=a}return _createClass(e,[{key:"frames",get:function(){return this._frames}},{key:"frametime",get:function(){return this._frametime}},{key:"repeatable",get:function(){return this._repeatable}}]),e}(),Animatable=function(e){function t(e,r,n){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,"animatable"),this._animations=r,this.current=n,this.__last=this.current}return _inherits(t,e),_createClass(t,[{key:"animations",get:function(){return this._animations}}]),t}(_Component$Registry.Component);exports.AnimationSystem=AnimationSystem,exports.Animation=Animation,exports.Animatable=Animatable;

},{"./component.js":5,"./renderable.js":15,"./system.js":22,"./utils.js":24}],2:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_get=function e(t,o,r){var n=Object.getOwnPropertyDescriptor(t,o);if(void 0===n){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,o,r)}if("value"in n)return n.value;var a=n.get;return void 0===a?void 0:a.call(r)},_inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)};Object.defineProperty(exports,"__esModule",{value:!0});var _Component2=require("./component.js"),AABBCollidable=function(e){function t(e){var o=void 0===arguments[1]?0:arguments[1],r=void 0===arguments[2]?0:arguments[2],n=void 0===arguments[3]?"slide":arguments[3];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,"collidable"),this.type="AABB",this.hw=o,this.hh=r,this.reaction=n,this.active_faces=[!0,!0,!0,!0],this.__collided=[]}return _inherits(t,e),t}(_Component2.Component);exports["default"]=AABBCollidable,module.exports=exports["default"];

},{"./component.js":5}],3:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var o=t[a];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,a,o){return a&&e(t.prototype,a),o&&e(t,o),t}}(),_get=function e(t,a,o){var i=Object.getOwnPropertyDescriptor(t,a);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,a,o)}if("value"in i)return i.value;var n=i.get;return void 0===n?void 0:n.call(o)},_inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)};Object.defineProperty(exports,"__esModule",{value:!0});var _GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),_Component$Registry=require("./component.js"),_vMath=require("./utils.js"),_resolveSweptAABB$resolveDiscreteAABB=require("./collisionresolution.js"),uid=0,TOP=0,RIGHT=1,BOTTOM=2,LEFT=3,CollisionDetectionSystem=function(e){function t(){var e=void 0===arguments[0]?"collisiondetection"+uid++:arguments[0];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,["position","collidable","movable"])}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e,a){var o=this,i=[],r=function(e,t){return i.some(function(a){return a[0]===e.id&&a[1]===t.id||a[1]===e.id&&a[0]===t.id})},n=_Component$Registry.Registry.getFlag("collidable"),l=_Component$Registry.Registry.getFlag("position");e.each(function(s){e.each(function(e){if(s!==e&&!r(s,e)){i.push([s.id,e.id]);var a=s.get(n),o=e.get(n),c=s.get(l),h=e.get(l);a.__collided=[],o.__collided=[],"AABB"===a.type&&"AABB"===o.type&&t.__AABBBooleanTest(a,o,c,h)&&i.push(s.id,e.id)}},o.lock),t.mapCollide(e.map,s,a)},this.lock)}}],[{key:"mapCollide",value:function(e,a,o){var i=e.__collidable,r=e.tilewidth,n=e.tileheight,l=_Component$Registry.Registry.getFlag("collidable"),s=_Component$Registry.Registry.getFlag("position"),c=_Component$Registry.Registry.getFlag("movable"),h=a.get(l),y=a.get(s),v=a.get(c),m=o/1e3,u=_vMath.vMath.mul(v.velocity,m),_=t.getSweptBroadphaseBox(a,o),f=!0,p=!1,d=void 0;try{for(var x,g=e.collision[Symbol.iterator]();!(f=(x=g.next()).done);f=!0)for(var B=x.value,T=B.length,M=0;T>M;M+=1)for(var A=B[M].length,b=0;A>b;b+=1){var w=B[M][b];if(w){var O=_vMath.vMath.vec2((b+.5)*r,(M+.5)*n);if(i.active_faces=w,"AABB"===h.type&&t.__AABBBooleanTest(_.collidable,i,_.position,O)){var R=t.__SweptAABBTest(h,i,y,O,u);if(R.t>0&&R.t<1)_resolveSweptAABB$resolveDiscreteAABB.resolveSweptAABB(a,R,o);else{var C=t.__AABBPenetrationTest(h,i,y,O);C.depth>0&&_resolveSweptAABB$resolveDiscreteAABB.resolveDiscreteAABB(a,C,o)}}}}}catch(S){p=!0,d=S}finally{try{!f&&g["return"]&&g["return"]()}finally{if(p)throw d}}}},{key:"getSweptBroadphaseBox",value:function(e,t){var a=_Component$Registry.Registry.getFlag("collidable"),o=_Component$Registry.Registry.getFlag("position"),i=_Component$Registry.Registry.getFlag("movable"),r=t/1e3,n=e.get(a),l=e.get(o),s=_vMath.vMath.mul(e.get(i).velocity,r),c=Math.min(l.x,l.x+s.x),h=Math.min(l.y,l.y+s.y),y=Math.max(l.x,l.x+s.x),v=Math.max(l.y,l.y+s.y),m=n.hw+Math.abs(s.x)/2,u=n.hh+Math.abs(s.y)/2;return{collidable:{hw:m,hh:u},position:_vMath.vMath.vec2(c+(y-c)/2,h+(v-h)/2)}}},{key:"__SweptAABBTest",value:function(e,t,a,o){var i=void 0===arguments[4]?_vMath.vMath.vec2():arguments[4],r=(void 0===arguments[5]?_vMath.vMath.vec2():arguments[5],{type:"swept",xnormal:0,ynormal:0,t:1}),n=void 0,l=void 0,s=void 0,c=void 0;i.x>0?(n=o.x-t.hw-(a.x+e.hw),s=o.x+t.hw-(a.x-e.hw)):(n=o.x+t.hw-(a.x-e.hw),s=o.x-t.hw-(a.x+e.hw)),i.y>0?(l=o.y-t.hh-(a.y+e.hh),c=o.y+t.hh-(a.y-e.hh)):(l=o.y+t.hh-(a.y-e.hh),c=o.y-t.hh-(a.y+e.hh));var h=void 0,y=void 0,v=void 0,m=void 0;0===i.x?(h=-(1/0),v=1/0):(h=n/i.x,v=s/i.x),0===i.y?(y=-(1/0),m=1/0):(y=l/i.y,m=c/i.y);var u=Math.max(h,y),_=Math.min(v,m);return u>_||0>h&&0>y||h>1&&y>1?r:(h>y?0>n&&e.active_faces[LEFT]===!0&&t.active_faces[RIGHT]===!0?(r.t=u,r.xnormal=1,r.ynormal=0):e.active_faces[RIGHT]===!0&&t.active_faces[LEFT]===!0&&(r.t=u,r.xnormal=-1,r.ynormal=0):0>l&&e.active_faces[TOP]===!0&&t.active_faces[BOTTOM]===!0?(r.t=u,r.xnormal=0,r.ynormal=1):e.active_faces[BOTTOM]===!0&&t.active_faces[TOP]===!0&&(r.t=u,r.xnormal=0,r.ynormal=-1),r)}},{key:"__AABBPenetrationTest",value:function(e,t,a,o){var i=e.hw+t.hw,r=e.hh+t.hh,n=_vMath.vMath.sub(o,a),l={type:"discrete",xnormal:0,ynormal:0,depth:0},s=Math.abs(Math.abs(i)-Math.abs(n.x)),c=Math.abs(Math.abs(r)-Math.abs(n.y));return n.x>0&&n.x<i?n.y>0&&n.y<r?c>s&&e.active_faces[RIGHT]===!0&&t.active_faces[LEFT]===!0?(l.xnormal=-1,l.ynormal=0,l.depth=s):e.active_faces[BOTTOM]===!0&&t.active_faces[TOP]===!0&&(l.xnormal=0,l.ynormal=-1,l.depth=c):n.y<0&&n.y>-r&&(c>s&&e.active_faces[RIGHT]===!0&&t.active_faces[LEFT]===!0?(l.xnormal=-1,l.ynormal=0,l.depth=s):e.active_faces[TOP]===!0&&t.active_faces[BOTTOM]===!0&&(l.xnormal=0,l.ynormal=1,l.depth=c)):n.x<0&&n.x>-i&&(n.y>0&&n.y<r?c>s&&e.active_faces[LEFT]===!0&&t.active_faces[RIGHT]===!0?(l.xnormal=1,l.ynormal=0,l.depth=s):e.active_faces[BOTTOM]===!0&&t.active_faces[TOP]===!0&&(l.xnormal=0,l.ynormal=-1,l.depth=c):n.y<0&&n.y>-r&&(c>s&&e.active_faces[LEFT]===!0&&t.active_faces[RIGHT]===!0?(l.xnormal=1,l.ynormal=0,l.depth=s):e.active_faces[TOP]===!0&&t.active_faces[BOTTOM]===!0&&(l.xnormal=0,l.ynormal=1,l.depth=c))),l}},{key:"__AABBBooleanTest",value:function(e,t,a,o){var i={minx:a.x-e.hw,miny:a.y-e.hh,maxx:a.x+e.hw,maxy:a.y+e.hh},r={minx:o.x-t.hw,miny:o.y-t.hh,maxx:o.x+t.hw,maxy:o.y+t.hh};return i.minx<r.maxx&&i.maxx>r.minx&&i.miny<r.maxy&&i.maxy>r.miny}}]),t}(_GameSystem3["default"]);exports["default"]=CollisionDetectionSystem,module.exports=exports["default"];

},{"./collisionresolution.js":4,"./component.js":5,"./system.js":22,"./utils.js":24}],4:[function(require,module,exports){
"use strict";function resolveSweptAABB(e,t,r){var o=_Registry.Registry.getFlag("collidable"),i=_Registry.Registry.getFlag("position"),l=_Registry.Registry.getFlag("movable"),a=(e.get(o),e.get(i)),s=e.get(l),v=vMath.vec2(t.xnormal,t.ynormal),y=vMath.mul(s.velocity,r/1e3);if(!(vMath.dot(s.velocity,v)>0)){a.x+=y.x*t.t,a.y+=y.y*t.t;1-t.t;s.velocity=vMath.v_rej(s.velocity,v),0===t.xnormal&&-1===t.ynormal&&(s.__onground=!0)}}function resolveDiscreteAABB(e,t){var r=_Registry.Registry.getFlag("position"),o=_Registry.Registry.getFlag("movable"),i=e.get(r),l=vMath.vec2(t.xnormal,t.ynormal),a=e.get(o);vMath.dot(a.velocity,l)>0||(i.x+=t.xnormal*t.depth,i.y+=t.ynormal*t.depth,a.velocity=vMath.v_rej(a.velocity,l),0===t.xnormal&&-1===t.ynormal&&(a.__onground=!0))}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(exports,"__esModule",{value:!0});var _GameSystem=require("./system.js"),_GameSystem2=_interopRequireWildcard(_GameSystem),_Registry=require("./component.js"),uid=0;exports.resolveSweptAABB=resolveSweptAABB,exports.resolveDiscreteAABB=resolveDiscreteAABB;

},{"./component.js":5,"./system.js":22}],5:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var Registry=Object.defineProperties({__next_flag:1,__flags:{},getFlag:function(e){return this.__flags[e]||(this.__flags[e]=this.__next_flag,this.__next_flag=this.__next_flag<<1),this.__flags[e]}},{flags:{get:function(){return this.__flags},configurable:!0,enumerable:!0}}),Component=function(){function e(){var t=void 0===arguments[0]?"component_"+Date.now().toString():arguments[0],n=void 0===arguments[1]?null:arguments[1];_classCallCheck(this,e),this._flag=Registry.getFlag(n),this._name=t,this._id=Symbol(this._name)}return _createClass(e,[{key:"flag",get:function(){return this._flag}},{key:"name",get:function(){return this._name}},{key:"id",get:function(){return this._id}}]),e}();exports.Component=Component,exports.Registry=Registry;

},{}],6:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),_get=function e(t,r,o){var n=Object.getOwnPropertyDescriptor(t,r);if(void 0===n){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,o)}if("value"in n)return n.value;var a=n.get;return void 0===a?void 0:a.call(o)},_inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)};Object.defineProperty(exports,"__esModule",{value:!0});var _GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),_Registry=require("./component.js"),uid=0,PlayerControllerSystem=function(e){function t(){var e=void 0===arguments[0]?"playercontroller"+uid++:arguments[0];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,["state","movable","animatable"])}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e,r){var o=_Registry.Registry.getFlag("state"),n=_Registry.Registry.getFlag("movable"),i=_Registry.Registry.getFlag("animatable");e.each(function(e){var r=e.get(o),a=e.get(n),l=e.get(i),u=r.xmotion;"idle"===u?a.velocity.x=0:"walkleft"===u?(a.velocity.x=-400,a.facing=-1):"walkright"===u&&(a.velocity.x=400,a.facing=1);var c=r.ymotion;"ground"===c||"jump"===c&&(a.__onground=!1,a.velocity.y=-1e3),t.resolveAnimation(r,a,l)},this.lock)}}],[{key:"resolveAnimation",value:function(e,t,r){var o=e.xmotion,n=e.ymotion,i=void 0;i="ground"===n?"idle"===o?"idle":"walk":"jump",i+=1===t.facing?"right":"left",r.current=i}}]),t}(_GameSystem3["default"]);exports["default"]=PlayerControllerSystem,module.exports=exports["default"];

},{"./component.js":5,"./system.js":22}],7:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var _Registry=require("./component.js"),Entity=function(){function e(){var t=this,n=void 0===arguments[0]?"entity_"+Date.now().toString():arguments[0],r=void 0===arguments[1]?[]:arguments[1];_classCallCheck(this,e),this._name=n,this._id=Symbol(this.name),this._key=0,this._components={},r.forEach(function(e){return t.add(e)})}return _createClass(e,[{key:"name",get:function(){return this._name}},{key:"id",get:function(){return this._id}},{key:"key",get:function(){return this._key}},{key:"add",value:function(e){var t=e.flag;this._components[t]=e,this._key|=t}},{key:"get",value:function(e){return this._components[e]}},{key:"has",value:function(e){return(this.key&e)===e}},{key:"remove",value:function(e){var t=e.flag;e.c_id;this._components[t]&&(delete this._components[t],this._key&=~t)}}]),e}();exports["default"]=Entity,module.exports=exports["default"];

},{"./component.js":5}],8:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,s,i){return s&&e(t.prototype,s),i&&e(t,i),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var _Entity=require("./entity.js"),_Entity2=_interopRequireWildcard(_Entity),_WebGLRenderer=require("./render.js"),_WebGLRenderer2=_interopRequireWildcard(_WebGLRenderer),_ResourceManager=require("./resource.js"),_ResourceManager2=_interopRequireWildcard(_ResourceManager),_Interface=require("./interface.js"),_Interface2=_interopRequireWildcard(_Interface),_rAF$cRAF$vec2=require("./utils.js"),_default=function(){var e=function(t){var s=this,i=t.canvasSelector,n=t.shaders,r=t.resolution,_=(t.resources,t.sprites,t.render),a=(t.audio,t.event,t.phases),c=t.systems;_classCallCheck(this,e);var u=function(){var e=void 0===arguments[0]?"":arguments[0];return document.querySelector(e)};this.canvas=u(i),this.__loaded=!1,this.__resources_loaded=function(){},this.__user_defined_step=function(){},this.__user_persist={},this.__scenes={},this.activeScene=null,this.__last_time=0,this.__input=new _Interface2["default"](window,_rAF$cRAF$vec2.vec2(this.canvas.offsetLeft,this.canvas.offsetTop)),_||(this.render=_||new _WebGLRenderer2["default"](void 0,{el:this.canvas,shaders:n,resolution:r}),!this.render.success),this.__pipeline=Promise.resolve({}),this.__phaseorder=a||[],this.__phases={},this.__phaseorder.forEach(function(e){return s.__phases[e]=c[e]||[]})};return _createClass(e,[{key:"scenes",get:function(){return this.__scenes}},{key:"input",get:function(){return this.__input}},{key:"resource",value:function(e){return this.__pipeline=this.__pipeline.then(function(){return _ResourceManager2["default"].loadResources(e)})["catch"](function(e){return console.error("Error loading resource: "+e)}),this}},{key:"ready",value:function(e){var t=this;return this.__pipeline=this.__pipeline.then(e.bind(this)).then(function(){t.__loaded=!0})["catch"](function(e){console.error(e)}),this}},{key:"then",value:function(e){return this.__pipeline=this.__pipeline.then(e.bind(this)),this}},{key:"catch",value:function(e){return this.__pipeline=this.__pipeline["catch"](e.bind(this)),this}},{key:"__updateSystems",value:function(e){var t=this;this.__input.process(),this.activeScene&&!function(){var s=t.activeScene;t.__phaseorder.forEach(function(i){var n=t.__phases[i];n.forEach(function(t){return t.update(s,e)})}),t.render.update(s,e)}()}},{key:"__tick",value:function(e){0===this.__last_time&&(this.__last_time=e);var t=e-this.__last_time;this.__loaded&&(this.__updateSystems(t),this.__user_persist=this.__user_defined_step(t,this.__user_persist)),this.__last_time=e,this.__raf_id=_rAF$cRAF$vec2.rAF(this.__tick.bind(this))}},{key:"step",value:function(e){return this.__user_defined_step=e.bind(this),this}},{key:"run",value:function(){return console.log("run"),this.__tick(0),this}},{key:"stop",value:function(){return _rAF$cRAF$vec2.cRAF(this.__raf_id),this}},{key:"addScene",value:function(e){this.__scenes[e.id]=e}},{key:"removeScene",value:function(e){this.__scenes[e]?delete this.__scenes[e]:this.__scenes[e.id]&&delete this.__scenes[e.id]}},{key:"loadScene",value:function(e){this.__scenes[e]?this.activeScene=this.__scenes[e]:this.__scenes[e.id]&&(this.activeScene=this.__scenes[e.id]),this.activeScene.__inputstate=this.input}},{key:"addPhase",value:function(e,t){this.__phaseorder.splice(t,0,e),this.__phases[e]=[]}},{key:"addSystem",value:function(e,t){this.__phases[t]&&this.__phases[t].push(e)}}]),e}();exports["default"]=_default,module.exports=exports["default"];

},{"./entity.js":7,"./interface.js":9,"./render.js":14,"./resource.js":16,"./utils.js":24}],9:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var n=t[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,s,n){return s&&e(t.prototype,s),n&&e(t,n),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var _vMath=require("./utils.js"),Interface=function(){function e(t){var s=void 0===arguments[1]?_vMath.vMath.vec2():arguments[1],n=void 0===arguments[2]?["mousedown","mouseup","mousemove","keydown","keyup"]:arguments[2];_classCallCheck(this,e),this.__window=t,this.__event_queue=[],this.__key_state={},this.__mouse_state={lmb:0,mmb:0,rmb:0,pos:_vMath.vMath.vec2()},this.__canvas_offset=s,n.forEach(this._bindEvent.bind(this))}return _createClass(e,[{key:"mouse",get:function(){return this.__mouse_state}},{key:"key",get:function(){return this.__key_state}},{key:"_listener",value:function(e){this.__event_queue.push(e)}},{key:"_bindEvent",value:function(e){this.__window.addEventListener(e,this._listener.bind(this))}},{key:"process",value:function(){for(var e=void 0;this.__event_queue.length;)e=this.__event_queue.splice(0,1)[0],"mousedown"===e.type||"mouseup"===e.type||"mousemove"===e.type?this.handleMouseEvent(e):("keydown"===e.type||"keyup"===e.type)&&this.handleKeyEvent(e)}},{key:"handleMouseEvent",value:function(e){var t=_vMath.vMath.sub,s=_vMath.vMath.vec2;if("mousemove"===e.type)this.__mouse_state.pos=t(s(e.clientX,e.clientY),this.__canvas_offset);else{var n=-1;if("mousedown"===e.type)n=1;else{if("mouseup"!==e.type)return;n=0}0===e.button?this.__mouse_state.lmb=n:1===e.button?this.__mouse_state.mmb=n:2===e.button&&(this.__mouse_state.rmb=n)}}},{key:"handleKeyEvent",value:function(e){var t="";t=e.key?e.key:String.fromCharCode(e.keyCode).toLowerCase();var s=this.__key_state[t];if("keydown"!==e.type||s){if("keyup"!==e.type)return;s=0}else s=e.timeStamp;this.__key_state[t]=s}}]),e}();exports["default"]=Interface,module.exports=exports["default"];

},{"./utils.js":24}],10:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_Game=require("./game.js"),_Game2=_interopRequireWildcard(_Game),_Registry=require("./component.js"),_RenderableSolidRect$RenderableTexturedRect=require("./renderable.js"),_Position=require("./position.js"),_Position2=_interopRequireWildcard(_Position),_vMath$mMath$color=require("./utils.js"),_solid_rect_shaders=require("./shaders/solidrect.glsl.js"),_solid_rect_shaders2=_interopRequireWildcard(_solid_rect_shaders),_textured_rect_shaders=require("./shaders/texrect.glsl.js"),_textured_rect_shaders2=_interopRequireWildcard(_textured_rect_shaders),_Scene=require("./scene.js"),_Scene2=_interopRequireWildcard(_Scene),_Entity=require("./entity.js"),_Entity2=_interopRequireWildcard(_Entity),_PhysicsSystem$Movable=require("./physics.js"),_XMotionStateManager$YMotionStateManager$Stateful=require("./state.js"),_CollisionDetectionSystem=require("./collisiondetection.js"),_CollisionDetectionSystem2=_interopRequireWildcard(_CollisionDetectionSystem),_CollisionResolutionSystem=require("./collisionresolution.js"),_CollisionResolutionSystem2=_interopRequireWildcard(_CollisionResolutionSystem),_AABBCollidable=require("./collidable.js"),_AABBCollidable2=_interopRequireWildcard(_AABBCollidable),_Map=require("./map.js"),_Map2=_interopRequireWildcard(_Map),_SpriteLoader=require("./sprite.js"),_SpriteLoader2=_interopRequireWildcard(_SpriteLoader),_Animatable$AnimationSystem$Animation=require("./animation.js"),_PlayerControllerSystem=require("./controller.js"),_PlayerControllerSystem2=_interopRequireWildcard(_PlayerControllerSystem),canvas=document.querySelector("#screen"),entities=[],s=null,shaders={solid_rect:_solid_rect_shaders2["default"],textured_rect:_textured_rect_shaders2["default"]},twidth=64,theight=64;window.g=new _Game2["default"]({canvasSelector:"#screen",resolution:{width:canvas.clientWidth,height:canvas.clientHeight},phases:["state","collision","physics","draw"],systems:{state:[new _XMotionStateManager$YMotionStateManager$Stateful.XMotionStateManager,new _XMotionStateManager$YMotionStateManager$Stateful.YMotionStateManager],physics:[new _PlayerControllerSystem2["default"],new _PhysicsSystem$Movable.PhysicsSystem,new _CollisionDetectionSystem2["default"]],draw:[new _Animatable$AnimationSystem$Animation.AnimationSystem]}}).resource({player_data:{type:"json",path:"assets/json/player.json"},player_sheet:{type:"image",path:"assets/img/player.png"},map_tile_data:{type:"json",path:"assets/json/maptiles.json"},map_tile_sheet:{type:"image",path:"assets/img/map.png"},map_layout_data:{type:"json",path:"assets/json/map0.json"},texturedrect_vert_shader:{type:"shader",path:"assets/shaders/texturedrect/vertex.glsl"},texturedrect_frag_shader:{type:"shader",path:"assets/shaders/texturedrect/fragment.glsl"},solidrect_vert_shader:{type:"shader",path:"assets/shaders/solidrect/vertex.glsl"},solidrect_frag_shader:{type:"shader",path:"assets/shaders/solidrect/fragment.glsl"}}).then(function(e){return this.render.addShader("solid_rect",{fragment:e.shader.solidrect_frag_shader,vertex:e.shader.solidrect_vert_shader},["vertices","color"],["uPMatrix","uMVMatrix"],["aVertexPosition","aVertexColor"]),this.render.addShader("textured_rect",{fragment:e.shader.texturedrect_frag_shader,vertex:e.shader.texturedrect_vert_shader},["vertices","texture"],["uPMatrix","uMVMatrix","uSampler","uAlpha"],["aVertexPosition","aTextureCoord"]),e})["catch"](function(e){console.error("Error compiling shaders: "+e)}).then(function(e){var t={map:{texture:e.image.map_tile_sheet,sheet:e.json.map_tile_data},jetroid:{texture:e.image.player_sheet,sheet:e.json.player_data}};return e.sprites=_SpriteLoader2["default"](e.image,t),e})["catch"](function(e){console.error("error: "+e)}).then(function(e){var t=e.sprites,a={},i={};for(var r in t.jetroid)if(t.jetroid.hasOwnProperty(r)){var n=t.jetroid[r];a[r]=new _RenderableSolidRect$RenderableTexturedRect.RenderableTexturedRect(r,32,32,n)}var s=[a.idle0,a.idle1,a.idle2,a.idle3,a.idle4,a.idle5,a.idle6,a.idle7,a.idle8,a.idle9],o=[a.walk0,a.walk1,a.walk2,a.walk3,a.walk4,a.walk5,a.walk6,a.walk7],l=[a.jump0,a.jump1,a.jump2,a.jump3,a.jump4];return i.idleleft=new _Animatable$AnimationSystem$Animation.Animation(s,15,!0,_vMath$mMath$color.mMath.flipx()),i.idleright=new _Animatable$AnimationSystem$Animation.Animation(s,15,!0),i.walkleft=new _Animatable$AnimationSystem$Animation.Animation(o,15,!0,_vMath$mMath$color.mMath.flipx()),i.walkright=new _Animatable$AnimationSystem$Animation.Animation(o,15,!0),i.jumpleft=new _Animatable$AnimationSystem$Animation.Animation(l,15,!1,_vMath$mMath$color.mMath.flipx()),i.jumpright=new _Animatable$AnimationSystem$Animation.Animation(l,15,!1),e.animations=i,e}).ready(function(e){var t=e.sprites,a=_vMath$mMath$color.vMath.vec2,i=_vMath$mMath$color.vMath.vec3;entities.push(new _Entity2["default"]("blackrect",[new _RenderableSolidRect$RenderableTexturedRect.RenderableSolidRect("rect2",20,20),new _Position2["default"]("pos2",i(50,50))])),entities.push(new _Entity2["default"]("man",[new _Animatable$AnimationSystem$Animation.Animatable("player",{idleleft:e.animations.idleleft,idleright:e.animations.idleright,walkleft:e.animations.walkleft,walkright:e.animations.walkright,jumpleft:e.animations.jumpleft,jumpright:e.animations.jumpright},"idleright"),new _Position2["default"]("pos3",i(83,450)),new _PhysicsSystem$Movable.Movable("mov1",a(0,0),void 0,10),new _AABBCollidable2["default"]("man_collider",32,32),new _XMotionStateManager$YMotionStateManager$Stateful.Stateful("playerstate",{xmotion:"idle",ymotion:"inair"})]));var r=new _Map2["default"](t.map,a(25,25),e.json.map_layout_data.data,e.image.map_tile_sheet);s=new _Scene2["default"]("scene1",entities,r),this.addScene(s),this.loadScene(s),window.map=r,window.vMath=_vMath$mMath$color.vMath,window.mMath=_vMath$mMath$color.mMath}).step(function(e,t){var a=_Registry.Registry.getFlag("position"),i=(_Registry.Registry.getFlag("movable"),_Registry.Registry.getFlag("renderable"),_Registry.Registry.getFlag("state"),this.input.mouse.pos),r=entities[0].get(a);return r.x=i.x,r.y=i.y,t}).run();

},{"./animation.js":1,"./collidable.js":2,"./collisiondetection.js":3,"./collisionresolution.js":4,"./component.js":5,"./controller.js":6,"./entity.js":7,"./game.js":8,"./map.js":11,"./physics.js":12,"./position.js":13,"./renderable.js":15,"./scene.js":17,"./shaders/solidrect.glsl.js":18,"./shaders/texrect.glsl.js":19,"./sprite.js":20,"./state.js":21,"./utils.js":24}],11:[function(require,module,exports){
"use strict";function processTiles(e,r){var t={};for(var l in e)if(e.hasOwnProperty(l)){if(0===l){console.error("Tile id 0 is reserved");continue}var i=e[l];t[l]=new _RenderableTexturedRect.RenderableTexturedRect(l,r.x,r.y,i)}return t}function processMap(e){var r=[],t=[],l=!0,i=!1,a=void 0;try{for(var n,s=e[Symbol.iterator]();!(l=(n=s.next()).done);l=!0){for(var o=n.value,u=[],d=[],c=0;c<o.data.length;c+=1){for(var h=o.data[c],f=[],p=[],v=0;v<h.length;v+=1){var _=h[v];if(o.collidable){var b=o.data,y=[!(c>0&&b[c-1][v]),!(v<b[c].length-1&&b[c][v+1]),!(c<b.length-1&&b[c+1][v]),!(v>0&&b[c][v-1])];f.push(_?y:!1)}p.push(_)}o.collidable&&u.push(f),d.push(p)}r.push(u),t.push(d)}}catch(x){i=!0,a=x}finally{try{!l&&s["return"]&&s["return"]()}finally{if(i)throw a}}return{collision:r,render:t}}function generateLayerRenderArrays(e,r,t,l){for(var i=e.length,a=e[0].length,n=new Float32Array(i*a*30),s=0,o=0;o<e.length;o+=1)for(var u=0;u<e[o].length;u+=1){var d=e[o][u];if(0!==d){var c=r[d],h=u*t,f=(u+1)*t,p=o*l,v=(o+1)*l,_=n,b=s;if(c){var y=c.sprite.coords;_[b]=h,_[b+1]=p,_[b+2]=0,_[b+3]=y[0],_[b+4]=y[1],_[b+5]=f,_[b+5+1]=p,_[b+5+2]=0,_[b+5+3]=y[2],_[b+5+4]=y[3],_[b+10]=h,_[b+10+1]=v,_[b+10+2]=0,_[b+10+3]=y[4],_[b+10+4]=y[5],_[b+15]=h,_[b+15+1]=v,_[b+15+2]=0,_[b+15+3]=y[4],_[b+15+4]=y[5],_[b+20]=f,_[b+20+1]=p,_[b+20+2]=0,_[b+20+3]=y[2],_[b+20+4]=y[3],_[b+25]=f,_[b+25+1]=v,_[b+25+2]=0,_[b+25+3]=y[6],_[b+25+4]=y[7]}s+=30}}return{vertex:n}}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")};Object.defineProperty(exports,"__esModule",{value:!0});var _RenderableTexturedRect=require("./renderable.js"),_AABBCollidable=require("./collidable.js"),_AABBCollidable2=_interopRequireWildcard(_AABBCollidable),_vMath=require("./utils.js"),Map=function e(r,t,l,i){var a=this;_classCallCheck(this,e),this.__collidable=new _AABBCollidable2["default"]("maptile",t.x,t.y);var n=processMap(l),s=n.collision,o=n.render;this.collision=s,this.render=o,this.tilewidth=2*t.x,this.tileheight=2*t.y,this.tiles=processTiles(r,t),this.texture={source:i,gl_texture_id:-1,initialized:!1},this.buffers=[],l.forEach(function(e){var r=generateLayerRenderArrays(e.data,a.tiles,a.tilewidth,a.tileheight);a.buffers.push(r)})};exports["default"]=Map,module.exports=exports["default"];

},{"./collidable.js":2,"./renderable.js":15,"./utils.js":24}],12:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}},_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),_get=function e(t,r,o){var n=Object.getOwnPropertyDescriptor(t,r);if(void 0===n){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,o)}if("value"in n)return n.value;var a=n.get;return void 0===a?void 0:a.call(o)},_inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)};Object.defineProperty(exports,"__esModule",{value:!0});var _vMath=require("./utils.js"),_GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),_Component2=require("./component.js"),uid=0,PhysicsSystem=function(e){function t(){var e=void 0===arguments[0]?"physics"+uid++:arguments[0];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,["position","movable"])}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e,t){var r=this,o=t/1e3;e.each(function(e){var t=e.get(r.__flags.movable),n=e.get(r.__flags.position),i=t.velocity,a=i.x,s=i.y,c=t.acceleration;c.x,c.y;if(n.x+=a*o,n.y+=s*o,t.mass&&!t.__onground){var u=_vMath.vMath.vec2(0,2600);t.velocity.x+=u.x*o,t.velocity.y+=u.y*o}else t.__onground=!1},this.lock)}}]),t}(_GameSystem3["default"]),Movable=function(e){function t(e){var r=void 0===arguments[1]?_vMath.vMath.vec2():arguments[1],o=void 0===arguments[2]?_vMath.vMath.vec2():arguments[2],n=void 0===arguments[3]?0:arguments[3];_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e,"movable"),this.velocity=r,this.acceleration=o,this.mass=n,this.facing=1,this.__onground=!1}return _inherits(t,e),t}(_Component2.Component);exports.PhysicsSystem=PhysicsSystem,exports.Movable=Movable;

},{"./component.js":5,"./system.js":22,"./utils.js":24}],13:[function(require,module,exports){
"use strict";var _classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_get=function t(e,o,r){var n=Object.getOwnPropertyDescriptor(e,o);if(void 0===n){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,o,r)}if("value"in n)return n.value;var s=n.get;return void 0===s?void 0:s.call(r)},_inherits=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)};Object.defineProperty(exports,"__esModule",{value:!0});var _vec2=require("./utils.js"),_Component2=require("./component.js"),Position=function(t){function e(t){var o=void 0===arguments[1]?0:arguments[1],r=void 0===arguments[2]?0:arguments[2],n=void 0===arguments[3]?0:arguments[3];_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,"position"),o.y?(this.x=o.x,this.y=o.y,this.z=o.z):(this.x=o,this.y=r,this.z=n)}return _inherits(e,t),e}(_Component2.Component);exports["default"]=Position,module.exports=exports["default"];

},{"./component.js":5,"./utils.js":24}],14:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(t){return t&&t.__esModule?t:{"default":t}},_classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),_get=function t(e,r,i){var a=Object.getOwnPropertyDescriptor(e,r);if(void 0===a){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,r,i)}if("value"in a)return a.value;var n=a.get;return void 0===n?void 0:n.call(i)},_inherits=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)};Object.defineProperty(exports,"__esModule",{value:!0});var _Component$Registry=require("./component.js"),_vMath$mMath$color=require("./utils.js"),_GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),floor=Math.floor,uid=0,WebGLRenderer=function(t){function e(){var t=void 0===arguments[0]?"webglrenderer"+uid++:arguments[0],r=void 0===arguments[1]?{}:arguments[1];if(_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,["renderable","position"]),r.el&&r.resolution){var i=r.el,a=r.shaders,o=r.resolution;i.style.width=""+o.width+"px",i.style.height=""+o.height+"px";var n=window.devicePixelRatio||1;i.width=o.width*n,i.height=o.height*n,this._resolution=_vMath$mMath$color.vMath.vec3(o.width,o.height,1);try{this._ctx=i.getContext("webgl",{})||i.getContext("experimental-webgl",{})}catch(s){console.error(s)}if(!this._ctx)return void(this.success=!1);this.success=!0;var u=this._ctx;u&&(u.clearColor(1,0,1,1),u.disable(u.DEPTH_TEST),u.enable(u.BLEND),u.blendFunc(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA),u.depthFunc(u.LEQUAL),u.clear(u.COLOR_BUFFER_BIT|u.DEPTH_BUFFER_BIT)),this._textures=[],this._texture_dict={},this._shaders={};for(var l in a)a.hasOwnProperty(l)&&(this._shaders[l]=this._initShaderProgram(a[l]));this._ctx.viewport(0,0,this._resolution.x*n,this._resolution.y*n)}}return _inherits(e,t),_createClass(e,[{key:"addShader",value:function(t,e,r,i,a){this._shaders[t]=this._initShaderProgram({fragment_source:e.fragment,vertex_source:e.vertex,buffers:r,uniforms:i,attributes:a})}},{key:"_initShader",value:function(t,e){var r=this.ctx,i=void 0;return i=r.createShader(t),r.shaderSource(i,e),r.compileShader(i),r.getShaderParameter(i,r.COMPILE_STATUS)?i:(console.error("Error compiling shader: "+r.getShaderInfoLog(i)+". "),null)}},{key:"_initShaderProgram",value:function(t){var e=this.ctx,r=t.fragment_source,i=t.vertex_source,a=t.buffers,o=t.uniforms,n=t.attributes,s=this._initShader(e.FRAGMENT_SHADER,r),u=this._initShader(e.VERTEX_SHADER,i),l=e.createProgram(),h={},c={},_={};return a.forEach(function(t){h[t]=e.createBuffer()}),e.attachShader(l,s),e.attachShader(l,u),e.linkProgram(l),e.getProgramParameter(l,e.LINK_STATUS)||console.error("Error linking shader program. "),o.forEach(function(t){c[t]=e.getUniformLocation(l,t)}),n.forEach(function(t){_[t]=e.getAttribLocation(l,t)}),{program:l,buffers:h,uniforms:c,attribs:_}}},{key:"_initTexture",value:function(t){var e=void 0!==this._texture_dict[t.src]?this._texture_dict[t.src]:this._textures.length;if(e===this._textures.length){this._texture_dict[t.src]=e;var r=this.ctx,i=r.createTexture();r.bindTexture(r.TEXTURE_2D,i),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_NEAREST),r.generateMipmap(r.TEXTURE_2D),r.bindTexture(r.TEXTURE_2D,null),this._textures[e]=i}return e}},{key:"ctx",get:function(){return this._ctx}},{key:"update",value:function(t,e){var r=this;this.clear(),t.map&&this.drawMap(t.map),t.all(function(t){var e=r._sortRenderablesByTexture(t);r._drawRenderablesByTexture(e)},this.lock)}},{key:"clear",value:function(){this.ctx.clear(this.ctx.COLOR_BUFFER_BIT|this.ctx.DEPTH_BUFFER_BIT)}},{key:"draw",value:function(t){var e=void 0===arguments[1]?_vMath$mMath$color.vMath.vec3():arguments[1],r=void 0===arguments[2]?{}:arguments[2],i=_vMath$mMath$color.mMath.orthographic(0,this._resolution.x,this._resolution.y,0,0,10),a=_vMath$mMath$color.mMath.compose().translate(e);r.rotate&&a.rotate(r.rotate),r.scale&&a.scale(r.scale);var o=new Float32Array(_vMath$mMath$color.mMath.flatten(i)),n=new Float32Array(_vMath$mMath$color.mMath.flatten(a.done()));"solidrect"===t.type?this._drawSolidRect(t,o,n):"texturedrect"===t.type&&this._drawTexturedRect(t,o,n)}},{key:"drawMap",value:function(t){var e=this.ctx,r=this._shaders.textured_rect;t.texture.initialized===!1&&(t.texture.gl_texture_id=this._initTexture(t.texture.source.img),t.texture.initialized=!0),e.useProgram(r.program);var i=r.attribs.aVertexPosition,a=r.attribs.aTextureCoord,o=r.uniforms.uPMatrix,n=r.uniforms.uMVMatrix,s=r.uniforms.uSampler,u=r.uniforms.uAlpha,l=r.buffers.vertices,h=_vMath$mMath$color.mMath.orthographic(0,this._resolution.x,this._resolution.y,0,0,10),c=new Float32Array(_vMath$mMath$color.mMath.flatten(h)),_=new Float32Array(_vMath$mMath$color.mMath.flatten(_vMath$mMath$color.mMath.compose().done()));e.uniformMatrix4fv(o,!1,c),e.uniformMatrix4fv(n,!1,_),e.enableVertexAttribArray(i),e.enableVertexAttribArray(a),e.bindTexture(e.TEXTURE_2D,this._textures[t.texture.gl_texture_id]),e.uniform1i(s,0),e.uniform1f(u,1),e.bindBuffer(e.ARRAY_BUFFER,l),e.vertexAttribPointer(i,3,e.FLOAT,!1,20,0),e.vertexAttribPointer(a,2,e.FLOAT,!1,20,12),t.buffers.forEach(function(t){var r=t.vertex;e.bufferData(e.ARRAY_BUFFER,r,e.STATIC_DRAW),e.drawArrays(e.TRIANGLES,0,r.length/5)})}},{key:"_sortRenderablesByTexture",value:function(t){var e=_Component$Registry.Registry.getFlag("renderable"),r={};for(var i in t)if(t.hasOwnProperty(i)){var a=t[i],o=a.get(e);o.initialized===!1&&(o.gl_texture_id=this._initTexture(o.sprite.texture.img),o.initialized=!0);var n=o.gl_texture_id;void 0===n&&(n="none"),r[n]=r[n]||{texture_id:n,entities:[]},r[n].entities.push(a)}return r}},{key:"_drawRenderablesByTexture",value:function(t){var e=this,r=void 0===arguments[1]?{}:arguments[1],i=this.ctx,a=this._shaders.textured_rect;i.useProgram(a.program);var o=a.attribs.aVertexPosition,n=a.attribs.aTextureCoord,s=a.buffers.texture,u=a.buffers.vertices,l=a.uniforms.uPMatrix,h=a.uniforms.uMVMatrix,c=a.uniforms.uSampler,_=a.uniforms.uAlpha,f=_Component$Registry.Registry.getFlag("renderable"),d=_Component$Registry.Registry.getFlag("position"),m=_vMath$mMath$color.mMath.orthographic(0,this._resolution.x,this._resolution.y,0,0,10),x=new Float32Array(_vMath$mMath$color.mMath.flatten(m));i.enableVertexAttribArray(o),i.enableVertexAttribArray(n),i.uniformMatrix4fv(l,!1,x);for(var v in t)if(t.hasOwnProperty(v)){var A=t[v],R=A.texture_id,b=A.entities;if("none"===R){b.forEach(function(t){var r=t.get(f),i=t.get(d);e.draw(r,i)});continue}i.bindTexture(i.TEXTURE_2D,this._textures[R]),i.uniform1i(c,0),b.forEach(function(t){var e=t.get(d),a=t.get(f),l=a.sprite.coords,c=a.verts,m=_vMath$mMath$color.mMath.compose().translate(e).mul(a.transform);r.rotate&&m.rotate(r.rotate),r.scale&&m.scale(r.scale);var x=new Float32Array(_vMath$mMath$color.mMath.flatten(m.done()));i.uniformMatrix4fv(h,!1,x),i.uniform1f(_,a.opacity),i.bindBuffer(i.ARRAY_BUFFER,s),i.bufferData(i.ARRAY_BUFFER,l,i.STATIC_DRAW),i.vertexAttribPointer(n,2,i.FLOAT,!1,0,0),i.bindBuffer(i.ARRAY_BUFFER,u),i.bufferData(i.ARRAY_BUFFER,c,i.STATIC_DRAW),i.vertexAttribPointer(o,3,i.FLOAT,!1,0,0),i.drawArrays(i.TRIANGLE_STRIP,0,4)})}}},{key:"_drawSolidRect",value:function(t,e,r){var i=t.color,a=t.verts,o=this.ctx,n=this._shaders.solid_rect;o.useProgram(n.program);var s=n.attribs.aVertexPosition,u=n.attribs.aVertexColor,l=n.uniforms.uPMatrix,h=n.uniforms.uMVMatrix;o.enableVertexAttribArray(s),o.enableVertexAttribArray(u);var c=n.buffers.vertices;o.bindBuffer(o.ARRAY_BUFFER,c),o.bufferData(o.ARRAY_BUFFER,a,o.STATIC_DRAW),o.vertexAttribPointer(s,3,o.FLOAT,!1,0,0);var _=n.buffers.color;o.bindBuffer(o.ARRAY_BUFFER,_),o.bufferData(o.ARRAY_BUFFER,i,o.STATIC_DRAW),o.vertexAttribPointer(u,4,o.FLOAT,!1,0,0),o.uniformMatrix4fv(l,!1,e),o.uniformMatrix4fv(h,!1,r),o.drawArrays(o.TRIANGLE_STRIP,0,4)}},{key:"_drawTexturedRect",value:function(t,e,r){t.initialized===!1&&(t.gl_texture_id=this._initTexture(t.sprite.texture.img),t.initialized=!0);var i=this.ctx,a=this._shaders.textured_rect,o=t.gl_texture_id,n=t.verts,s=t.sprite.coords,u=this._textures[o];i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,u),i.useProgram(a.program);var l=a.attribs.aVertexPosition,h=a.attribs.aTextureCoord,c=a.uniforms.uPMatrix,_=a.uniforms.uMVMatrix,f=a.uniforms.uSampler,d=a.uniforms.uAlpha;i.enableVertexAttribArray(l),i.enableVertexAttribArray(h);var m=a.buffers.texture;i.bindBuffer(i.ARRAY_BUFFER,m),i.bufferData(i.ARRAY_BUFFER,s,i.STATIC_DRAW),i.vertexAttribPointer(h,2,i.FLOAT,!1,0,0);var x=a.buffers.vertices;i.bindBuffer(i.ARRAY_BUFFER,x),i.bufferData(i.ARRAY_BUFFER,n,i.STATIC_DRAW),i.vertexAttribPointer(l,3,i.FLOAT,!1,0,0),i.uniformMatrix4fv(c,!1,e),i.uniformMatrix4fv(_,!1,r),i.uniform1i(f,0),i.uniform1f(d,t.opacity),i.drawArrays(i.TRIANGLE_STRIP,0,4)}}]),e}(_GameSystem3["default"]);exports["default"]=WebGLRenderer,module.exports=exports["default"];

},{"./component.js":5,"./system.js":22,"./utils.js":24}],15:[function(require,module,exports){
"use strict";var _toConsumableArray=function(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)},_classCallCheck=function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function t(t,r){for(var e=0;e<r.length;e++){var o=r[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(r,e,o){return e&&t(r.prototype,e),o&&t(r,o),r}}(),_get=function t(r,e,o){var n=Object.getOwnPropertyDescriptor(r,e);if(void 0===n){var i=Object.getPrototypeOf(r);return null===i?void 0:t(i,e,o)}if("value"in n)return n.value;var a=n.get;return void 0===a?void 0:a.call(o)},_inherits=function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),r&&(t.__proto__=r)};Object.defineProperty(exports,"__esModule",{value:!0});var _vMath$color$mMath=require("./utils.js"),_Component4=require("./component.js"),RenderableSolidRect=function(t){function r(t){for(var e=arguments.length,o=Array(e>1?e-1:0),n=1;e>n;n++)o[n-1]=arguments[n];_classCallCheck(this,r),_get(Object.getPrototypeOf(r.prototype),"constructor",this).call(this,t,"renderable");var i=o[0],a=void 0===i?0:i,s=o[1],l=void 0===s?0:s,u=o[2],c=void 0===u?_vMath$color$mMath.color():u,h=o[3],g=void 0===h?_vMath$color$mMath.vMath.vec3():h;this.type="solidrect",this.origin=g,this.verts=new Float32Array([a-g.x,l-g.y,0-g.z,-a-g.x,l-g.y,0-g.z,a-g.x,-l-g.y,0-g.z,-a-g.x,-l-g.y,0-g.z]),this._color=new Float32Array([].concat(_toConsumableArray(c.arr),_toConsumableArray(c.arr),_toConsumableArray(c.arr),_toConsumableArray(c.arr)))}return _inherits(r,t),_createClass(r,[{key:"color",get:function(){return this._color},set:function(t){t.arr?this._color=new Float32Array([].concat(_toConsumableArray(t.arr),_toConsumableArray(t.arr),_toConsumableArray(t.arr),_toConsumableArray(t.arr))):this._color=t}}]),r}(_Component4.Component),RenderableTexturedRect=function(t){function r(t){var e=void 0===arguments[1]?0:arguments[1],o=void 0===arguments[2]?0:arguments[2],n=void 0===arguments[3]?null:arguments[3],i=void 0===arguments[4]?1:arguments[4],a=void 0===arguments[5]?_vMath$color$mMath.mMath.i():arguments[5],s=void 0===arguments[6]?0:arguments[6],l=void 0===arguments[7]?0:arguments[7],u=void 0===arguments[8]?0:arguments[8];_classCallCheck(this,r),_get(Object.getPrototypeOf(r.prototype),"constructor",this).call(this,t,"renderable"),this.type="texturedrect",this.origin=_vMath$color$mMath.vMath.vec3(s,l,u),this.initialized=!1,this.gl_texture_id=-1,this.transform=a,this.sprite=n,this.verts=new Float32Array([-e-this.origin.x,-o-this.origin.y,0-this.origin.z,e-this.origin.x,-o-this.origin.y,0-this.origin.z,-e-this.origin.x,o-this.origin.y,0-this.origin.z,e-this.origin.x,o-this.origin.y,0-this.origin.z]),this.opacity=i}return _inherits(r,t),r}(_Component4.Component),RenderableSolidPoly=function(t){function r(t){for(var e=arguments.length,o=Array(e>1?e-1:0),n=1;e>n;n++)o[n-1]=arguments[n];_classCallCheck(this,r),_get(Object.getPrototypeOf(r.prototype),"constructor",this).call(this,t,"renderable");var i=o[0],a=void 0===i?[]:i,s=o[1],l=void 0===s?_vMath$color$mMath.color():s,u=o[2],c=void 0===u?_vMath$color$mMath.color():u;this.points=a,this.fill=l,this.stroke=c}return _inherits(r,t),r}(_Component4.Component);exports.RenderableSolidRect=RenderableSolidRect,exports.RenderableSolidPoly=RenderableSolidPoly,exports.RenderableTexturedRect=RenderableTexturedRect;

},{"./component.js":5,"./utils.js":24}],16:[function(require,module,exports){
"use strict";var _slicedToArray=function(e,r){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){var t=[],n=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done)&&(t.push(i.value),!r||t.length!==r);n=!0);}catch(s){o=!0,a=s}finally{try{!n&&u["return"]&&u["return"]()}finally{if(o)throw a}}return t}throw new TypeError("Invalid attempt to destructure non-iterable instance")};Object.defineProperty(exports,"__esModule",{value:!0});var _Texture=require("./texture.js");exports["default"]={__mapifyObject:function(e){var r=[];return Object.keys(e).forEach(function(t){r.push([t,e[t]])}),r},__process:function(e){var r={},t={image:this.__createTexture,json:this.__parseJSON,shader:this.__loadShader};return e.forEach(function(e){var n=_slicedToArray(e,3),o=n[0],a=n[1],i=n[2];r[i]=r[i]||{},r[i][o]=t[i](a)}),r},__createTexture:function(e){return new _Texture.Texture(e,e.width,e.height)},__parseJSON:function(e){return JSON.parse(e)},__loadShader:function(e){return e},__createTextures:function(e){var r={};return e.forEach(function(e){var t=_slicedToArray(e,2),n=t[0],o=t[1];r[n]=new _Texture.Texture(o,o.width,o.height)}),r},__loadImage:function(e){var r=_slicedToArray(e,2),t=r[0],n=r[1];return new Promise(function(e,r){var o=new Image;o.onload=function(){return e([t,o,"image"])},o.onerror=function(){return r(n)},o.src=n})},__loadJSONFile:function(e){var r=_slicedToArray(e,2),t=r[0],n=r[1];return new Promise(function(e,r){var o=new XMLHttpRequest;o.onload=function(){return e([t,o.response,"json"])},o.onerror=function(){return r(n)},o.open("GET",n,!0),o.send()})},__loadShaderFile:function(e){var r=_slicedToArray(e,2),t=r[0],n=r[1];return new Promise(function(e,r){var o=new XMLHttpRequest;o.onload=function(){return e([t,o.response,"shader"])},o.onerror=function(){return r(n)},o.open("GET",n,!0),o.send()})},__load:function(e){var r=_slicedToArray(e,2),t=r[0],n=r[1],o=n.path,a=n.type,i={image:this.__loadImage,json:this.__loadJSONFile,shader:this.__loadShaderFile};return void 0===i[a]?Promise.reject(""+[t,o]+" resource must have a type"):i[a]([t,o])},loadResources:function(e){var r=this.__mapifyObject(e);return Promise.all(r.map(this.__load.bind(this))).then(this.__process.bind(this))}},module.exports=exports["default"];

},{"./texture.js":23}],17:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var Scene=function(){function e(){var t=void 0===arguments[0]?"scene_"+Date.now().toString():arguments[0],n=void 0===arguments[1]?[]:arguments[1],r=void 0===arguments[2]?null:arguments[2];_classCallCheck(this,e),this._name=t,this._id=Symbol(this.name),this.__entities=n,this.__map=r,this.__inputstate=null}return _createClass(e,[{key:"id",get:function(){return this._id}},{key:"name",get:function(){return this._name}},{key:"map",get:function(){return this.__map}},{key:"input",get:function(){return this.__inputstate}},{key:"filter",value:regeneratorRuntime.mark(function t(e){var n,r,i,a,s,u;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:n=!0,r=!1,i=void 0,t.prev=3,a=this.entities[Symbol.iterator]();case 5:if(n=(s=a.next()).done){t.next=13;break}if(u=s.value,!e(u)){t.next=10;break}return t.next=10,u;case 10:n=!0,t.next=5;break;case 13:t.next=19;break;case 15:t.prev=15,t.t0=t["catch"](3),r=!0,i=t.t0;case 19:t.prev=19,t.prev=20,!n&&a["return"]&&a["return"]();case 22:if(t.prev=22,!r){t.next=25;break}throw i;case 25:return t.finish(22);case 26:return t.finish(19);case 27:case"end":return t.stop()}},t,this,[[3,15,19,27],[20,,22,26]])})},{key:"entities",get:function(){return this.__entities}},{key:"addEntity",value:function(e){this.__entities[e.id]=e}},{key:"removeEntity",value:function(e){delete this.__entities[e]}},{key:"all",value:function(e,t,n){var r="function"==typeof t?t:function(e){return e.has(t)},i=this.entities.filter(r);n?e.call(n,i):e(i)}},{key:"each",value:function(e,t,n){for(var r="function"==typeof t?t:function(e){return e.has(t)},i=this.filter(r),a=i.next();!a.done;)n?e.call(n,a.value):e(a.value),a=i.next()}}]),e}();exports["default"]=Scene,module.exports=exports["default"];

},{}],18:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]={vertex_source:"\n\n          attribute vec3 aVertexPosition;\n          attribute vec4 aVertexColor;\n\n          uniform mat4 uMVMatrix;\n          uniform mat4 uPMatrix;\n\n          varying lowp vec4 vColor;\n\n          void main(void) {\n            gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n            vColor = aVertexColor;\n          }\n\n    ",fragment_source:"\n\n          varying lowp vec4 vColor;\n\n          void main(void) {\n            gl_FragColor = vColor;\n\n          }\n\n  ",buffers:["vertices","color"]},module.exports=exports["default"];

},{}],19:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]={vertex_source:"\n\n          attribute vec3 aVertexPosition;\n          attribute vec2 aTextureCoord;\n\n          uniform mat4 uMVMatrix;\n          uniform mat4 uPMatrix;\n\n          varying highp vec2 vTextureCoord;\n\n          void main(void) {\n            gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n            vTextureCoord = aTextureCoord;\n          }\n\n    ",fragment_source:"\n\n          varying highp vec2 vTextureCoord;\n\n          uniform sampler2D uSampler;\n          uniform highp float uAlpha;\n\n          void main(void) {\n            gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n            gl_FragColor.a *= uAlpha;\n\n          }\n\n  ",buffers:["vertices","texture"]},module.exports=exports["default"];

},{}],20:[function(require,module,exports){
"use strict";function SpriteLoader(e,r){var t={};for(var o in r)if(r.hasOwnProperty(o)){var u=r[o];if(!u.texture)return void console.error("Texture missing: "+u.texture);t[o]={};for(var i in u.sheet)if(u.sheet.hasOwnProperty(i)){var s=u.texture,a=u.sheet[i];a.frame&&(a=a.frame),t[o][i]=new _TextureRegion.TextureRegion(s,a.x,a.y,a.w,a.h)}}return t}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=SpriteLoader;var _TextureRegion=require("./texture.js");module.exports=exports["default"];

},{"./texture.js":23}],21:[function(require,module,exports){
"use strict";var _interopRequireWildcard=function(t){return t&&t.__esModule?t:{"default":t}},_classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),_get=function t(e,n,r){var a=Object.getOwnPropertyDescriptor(e,n);if(void 0===a){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in a)return a.value;var i=a.get;return void 0===i?void 0:i.call(r)},_inherits=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)};Object.defineProperty(exports,"__esModule",{value:!0});var _GameSystem2=require("./system.js"),_GameSystem3=_interopRequireWildcard(_GameSystem2),_Component$Registry=require("./component.js"),uid=0,stateMask=function(t){var e=this;return function(n){return n.has(e.lock)&&n.get(_Component$Registry.Registry.getFlag("state"))[t]}},StateManager=function(t){function e(t,n){var r=void 0===arguments[2]?[]:arguments[2];_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,["state"].concat(r)),this.__statemachine=n}return _inherits(e,t),_createClass(e,[{key:"state",get:function(){return this.__statemachine}},{key:"_enter",value:function(t,e){t[this.state]=e}},{key:"update",value:function(t,e){var n=this,r=_Component$Registry.Registry.getFlag("state");t.each(function(e){var a=e.get(r),o=a[n.state];n[o](a,t,e)},stateMask.call(this,this.state))}}]),e}(_GameSystem3["default"]),XMotionStateManager=function(t){function e(){var t=void 0===arguments[0]?"state"+uid++:arguments[0];_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,"xmotion")}return _inherits(e,t),_createClass(e,[{key:"idle",value:function(t,e){var n=e.input.key;n.a?this._enter(t,"walkleft"):n.d&&this._enter(t,"walkright")}},{key:"walkleft",value:function(t,e){var n=e.input.key;n.a?n.d>0&&n.d>n.a&&this._enter(t,"walkright"):this._enter(t,"idle")}},{key:"walkright",value:function(t,e){var n=e.input.key;n.d?n.a>0&&n.a>n.d&&this._enter(t,"walkleft"):this._enter(t,"idle")}}]),e}(StateManager),YMotionStateManager=function(t){function e(){var t=void 0===arguments[0]?"state"+uid++:arguments[0];_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,"ymotion",["movable"])}return _inherits(e,t),_createClass(e,[{key:"ground",value:function(t,e){var n=e.input.key;n.w&&this._enter(t,"jump")}},{key:"jump",value:function(t){this._enter(t,"inair")}},{key:"inair",value:function(t,e,n){var r=_Component$Registry.Registry.getFlag("movable");n.get(r).__onground&&this._enter(t,"ground")}}]),e}(StateManager),Stateful=function(t){function e(t,n){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,"state");for(var r in n)n.hasOwnProperty(r)&&(this[r]=n[r])}return _inherits(e,t),e}(_Component$Registry.Component);exports.Stateful=Stateful,exports.XMotionStateManager=XMotionStateManager,exports.YMotionStateManager=YMotionStateManager;

},{"./component.js":5,"./system.js":22}],22:[function(require,module,exports){
"use strict";var _classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(exports,"__esModule",{value:!0});var _Registry=require("./component.js"),GameSystem=function(){function e(){var t=this,n=void 0===arguments[0]?"system_"+Date.now().toString():arguments[0],r=void 0===arguments[1]?[]:arguments[1];_classCallCheck(this,e),this._name=n,this._id=Symbol(this._name),this._lock=0,this.__flags={},r.forEach(function(e){var n=_Registry.Registry.getFlag(e);t._lock|=n,t.__flags[e]=n}),this.__state={}}return _createClass(e,[{key:"id",get:function(){return this._id}},{key:"lock",get:function(){return this._lock}},{key:"state",get:function(){return this.__state}},{key:"update",value:function(e,t){}}]),e}();exports["default"]=GameSystem,module.exports=exports["default"];

},{"./component.js":5}],23:[function(require,module,exports){
"use strict";var _classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var h=e[i];h.enumerable=h.enumerable||!1,h.configurable=!0,"value"in h&&(h.writable=!0),Object.defineProperty(t,h.key,h)}}return function(e,i,h){return i&&t(e.prototype,i),h&&t(e,h),e}}();Object.defineProperty(exports,"__esModule",{value:!0});var Texture=function(){function t(e,i,h){_classCallCheck(this,t),this._img=e,this._width=i,this._height=h}return _createClass(t,[{key:"img",get:function(){return this._img}},{key:"width",get:function(){return this._width}},{key:"height",get:function(){return this._height}}]),t}(),TextureRegion=function(){function t(e,i,h,r,n){_classCallCheck(this,t),this._tex=e,this._x=i,this._y=h,this._w=r,this._h=n,this._tex_coords=new Float32Array([this.x/this.texture.width,this.y/this.texture.height,(this.x+this.width)/this.texture.width,this.y/this.texture.height,this.x/this.texture.width,(this.y+this.height)/this.texture.height,(this.x+this.width)/this.texture.width,(this.y+this.height)/this.texture.height])}return _createClass(t,[{key:"texture",get:function(){return this._tex}},{key:"x",get:function(){return this._x}},{key:"y",get:function(){return this._y}},{key:"width",get:function(){return this._w}},{key:"height",get:function(){return this._h}},{key:"coords",get:function(){return this._tex_coords}}]),t}();exports.Texture=Texture,exports.TextureRegion=TextureRegion;

},{}],24:[function(require,module,exports){
"use strict";var _slicedToArray=function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){var r=[],e=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(e=(u=a.next()).done)&&(r.push(u.value),!n||r.length!==n);e=!0);}catch(s){i=!0,o=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(i)throw o}}return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")};Object.defineProperty(exports,"__esModule",{value:!0});var sqrt=Math.sqrt,cos=Math.cos,sin=Math.sin,tan=Math.tan,pi=Math.PI,vec2=function(){var t=void 0===arguments[0]?0:arguments[0],n=void 0===arguments[1]?0:arguments[1];return{x:t,y:n}},vec3=function(){var t=void 0===arguments[0]?0:arguments[0],n=void 0===arguments[1]?0:arguments[1],r=void 0===arguments[2]?0:arguments[2];return{x:t,y:n,z:r}},vec_ops={vec2:vec2,vec3:vec3,neg:function(t){return vec2(-t.x,-t.y)},add:function(t,n){return vec2(t.x+n.x,t.y+n.y)},mul:function(t,n){return vec2(t.x*n,t.y*n)},sub:function(t,n){return vec_ops.add(t,vec_ops.neg(n))},div:function(t,n){return vec_ops.mul(t,1/n)},magSq:function(t){return t.x*t.x+t.y*t.y},mag:function(t){return sqrt(vec_ops.magSq(t))},unit:function(t){return vec_ops.div(t,vec_ops.mag(t))},dot:function(t,n){return t.x*n.x+t.y*n.y},cross:function(t,n){return t.x*n.y-t.y*n.x},rot:function(t,n){return vec2(t.x*cos(n)-t.y*sin(n),t.x*sin(n)+t.y*cos(n))},s_proj:function(t,n){return vec_ops.dot(t,n)/vec_ops.mag(n)},v_proj:function(t,n){return vec_ops.mul(n,vec_ops.dot(t,n)/vec_ops.dot(n,n))},v_rej:function(t,n){return vec_ops.sub(t,vec_ops.v_proj(t,n))}},mtx=function(t){if(t.length){var n=function(){var n=t[0].length;return n&&t.every(function(t){return t.length===n})?{v:t.map(function(t){return t.slice()})}:void 0}();if("object"==typeof n)return n.v}return[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},mtx_ops={_scalarMultiplication:function(t,n){return mtx(t.map(function(t){return t.map(function(t){return t*n})}))},_matrixMultiplication:function(t,n){return mtx([[t[0][0]*n[0][0]+t[0][1]*n[1][0]+t[0][2]*n[2][0]+t[0][3]*n[3][0],t[0][0]*n[0][1]+t[0][1]*n[1][1]+t[0][2]*n[2][1]+t[0][3]*n[3][1],t[0][0]*n[0][2]+t[0][1]*n[1][2]+t[0][2]*n[2][2]+t[0][3]*n[3][2],t[0][0]*n[0][3]+t[0][1]*n[1][3]+t[0][2]*n[2][3]+t[0][3]*n[3][3]],[t[1][0]*n[0][0]+t[1][1]*n[1][0]+t[1][2]*n[2][0]+t[1][3]*n[3][0],t[1][0]*n[0][1]+t[1][1]*n[1][1]+t[1][2]*n[2][1]+t[1][3]*n[3][1],t[1][0]*n[0][2]+t[1][1]*n[1][2]+t[1][2]*n[2][2]+t[1][3]*n[3][2],t[1][0]*n[0][3]+t[1][1]*n[1][3]+t[1][2]*n[2][3]+t[1][3]*n[3][3]],[t[2][0]*n[0][0]+t[2][1]*n[1][0]+t[2][2]*n[2][0]+t[2][3]*n[3][0],t[2][0]*n[0][1]+t[2][1]*n[1][1]+t[2][2]*n[2][1]+t[2][3]*n[3][1],t[2][0]*n[0][2]+t[2][1]*n[1][2]+t[2][2]*n[2][2]+t[2][3]*n[3][2],t[2][0]*n[0][3]+t[2][1]*n[1][3]+t[2][2]*n[2][3]+t[2][3]*n[3][3]],[t[3][0]*n[0][0]+t[3][1]*n[1][0]+t[3][2]*n[2][0]+t[3][3]*n[3][0],t[3][0]*n[0][1]+t[3][1]*n[1][1]+t[3][2]*n[2][1]+t[3][3]*n[3][1],t[3][0]*n[0][2]+t[3][1]*n[1][2]+t[3][2]*n[2][2]+t[3][3]*n[3][2],t[3][0]*n[0][3]+t[3][1]*n[1][3]+t[3][2]*n[2][3]+t[3][3]*n[3][3]]])},mtx:mtx,i:function(){return mtx([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])},mul:function(t,n){return"number"==typeof n?this._scalarMultiplication(t,n):this._matrixMultiplication(t,n)},flipx:function(){return mtx([[-1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])},flatten:function(t){for(var n=[],r=0;r<t[0].length;r+=1)for(var e=0;e<t.length;e+=1)n.push(t[e][r]);return n},perspective:function(t,n,r,e){void 0===arguments[4]?!0:arguments[4];if(0>=t||0===n)return console.error("Error creating a perspective matrix: Division by zero (fov = "+t+", aspect = "+n),result;var i=r*tan(t*pi/360),o=-i,u=o*n,a=i*n,s=2*r/(a-u),c=2*r/(i-o),m=(a+u)/(a-u),f=(i+o)/(i-o),l=-(e+r)/(e-r),v=-2*e*r/(e-r);return mtx([[s,0,m,0],[0,c,f,0],[0,0,l,v],[0,0,-1,0]])},orthographic:function(t,n,r,e,i,o){var u=n-t,a=e-r,s=o-i,c=2/u,m=2/a,f=-2/s,l=-(t+n)/u,v=-(e+r)/a,_=-(o+i)/s;return mtx([[c,0,0,l],[0,m,0,v],[0,0,f,_],[0,0,0,1]])},translation:function(t){var n=this.i(),r=[t.x,t.y,t.z?t.z:0];return n[0][3]=r[0],n[1][3]=r[1],n[2][3]=r[2],n},scale:function(t){var n=this.i(),r=[t.x,t.y,t.z?t.z:0];return n[0][0]=r[0],n[1][1]=r[1],n[2][2]=r[2],n},rotation:function(t){var n=this.i();return n[0][0]=cos(t),n[0][1]=sin(t),n[1][0]=-sin(t),n[1][1]=cos(t),n},compose:function(){return{__mtx:mtx_ops.i(),done:function(){return this.__mtx},translate:function(t){return this.__mtx=mtx_ops.mul(this.__mtx,mtx_ops.translation(t)),this},scale:function(t){return this.__mtx=mtx_ops.mul(this.__mtx,mtx_ops.scale(t)),this},rotate:function(t){return this.__mtx=mtx_ops.mul(this.__mtx,mtx_ops.rotation(t)),this},mul:function(t){return this.__mtx=mtx_ops.mul(this.__mtx,t),this}}},print:function(t){return"\n        "+t[0][0]+" "+t[0][1]+" "+t[0][2]+" "+t[0][3]+"\n        "+t[1][0]+" "+t[1][1]+" "+t[1][2]+" "+t[1][3]+"\n        "+t[2][0]+" "+t[2][1]+" "+t[2][2]+" "+t[2][3]+"\n        "+t[3][0]+" "+t[3][1]+" "+t[3][2]+" "+t[3][3]+"\n        "}},color=function(){var t=void 0===arguments[0]?0:arguments[0],n=void 0===arguments[1]?0:arguments[1],r=void 0===arguments[2]?0:arguments[2],e=void 0===arguments[3]?1:arguments[3],i=0;if("string"==typeof t){var o=void 0;if(t.startsWith("rgba")){var u=t.match(/rgba\((\d+),(\d+),(\d+),(\d+)\)/),a=_slicedToArray(u,5);o=a[0],i=a[1],n=a[2],r=a[3],e=a[4]}else if(t.startsWith("#")){if(9===t.length){var s=t.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/),c=_slicedToArray(s,5);o=c[0],i=c[1],n=c[2],r=c[3],e=c[4]}else if(5==t.length){var m=t.match(/#([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})/),f=_slicedToArray(m,5);o=f[0],i=f[1],n=f[2],r=f[3],e=f[4],i=""+i+i,n=""+n+n,r=""+r+r,e=""+e+e}i=parseInt(i,16)/255,n=parseInt(n,16)/255,r=parseInt(r,16)/255,e=parseInt(e,16)/255}}else i=t;return Object.defineProperties({_r:i,_g:n,_b:r,_a:e,arr:[i,n,r,e],toString:function(){return"rgba("+this.r+","+this.g+","+this.b+","+this.a+")"}},{r:{get:function(){return this._r},set:function(t){this._r=t,this.arr[0]=t},configurable:!0,enumerable:!0},g:{get:function(){return this._g},set:function(t){this._g=t,this.arr[1]=t},configurable:!0,enumerable:!0},b:{get:function(){return this._b},set:function(t){this._b=t,this.arr[2]=t},configurable:!0,enumerable:!0},a:{get:function(){return this._a},set:function(t){this._a=t,this.arr[3]=t},configurable:!0,enumerable:!0}})},rAF=window.requestAnimationFrame.bind(window)||window.mozRequestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame.bind(window)||window.oRequestAnimationFrame.bind(window)||function(t){return window.setTimeout.call(window,t,1e3/60)},cRAF=window.cancelAnimationFrame.bind(window)||window.mozCancelAnimationFrame.bind(window)||window.webkitCancelAnimationFrame.bind(window)||window.oCancelAnimationFrame.bind(window)||function(t){return window.clearTimeout.call(window,t)};exports.vec2=vec2,exports.vMath=vec_ops,exports.mMath=mtx_ops,exports.color=color,exports.rAF=rAF,exports.cRAF=cRAF;

},{}]},{},[10])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
